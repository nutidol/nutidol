{"version":3,"file":"component---src-pages-p-bb-js-7557df87e867e712d411.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/p-bb.js","webpack://gatsby-starter-default/./src/images/cookburn/1.png","webpack://gatsby-starter-default/./src/images/cookburn/10.png","webpack://gatsby-starter-default/./src/images/cookburn/11.png","webpack://gatsby-starter-default/./src/images/cookburn/12.png","webpack://gatsby-starter-default/./src/images/cookburn/13.png","webpack://gatsby-starter-default/./src/images/cookburn/14.png","webpack://gatsby-starter-default/./src/images/cookburn/15.png","webpack://gatsby-starter-default/./src/images/cookburn/16.png","webpack://gatsby-starter-default/./src/images/cookburn/2.png","webpack://gatsby-starter-default/./src/images/cookburn/3.png","webpack://gatsby-starter-default/./src/images/cookburn/4.png","webpack://gatsby-starter-default/./src/images/cookburn/5.png","webpack://gatsby-starter-default/./src/images/cookburn/6.png","webpack://gatsby-starter-default/./src/images/cookburn/7.png","webpack://gatsby-starter-default/./src/images/cookburn/8.png","webpack://gatsby-starter-default/./src/images/cookburn/9.png"],"sourcesContent":["import * as React from \"react\"\nimport Header from \"../components/Header\"\nimport Footer from \"../components/Footer\"\nimport cookburnOverview from \"../images/cookburn/1.png\"\n\nimport ds1 from \"../images/cookburn/2.png\"\nimport ds2 from \"../images/cookburn/3.png\"\nimport ds3 from \"../images/cookburn/4.png\"\nimport ds4 from \"../images/cookburn/5.png\"\nimport ds5 from \"../images/cookburn/6.png\"\nimport ds6 from \"../images/cookburn/7.png\"\n\nimport fn1 from \"../images/cookburn/8.png\"\nimport fn2 from \"../images/cookburn/9.png\"\nimport fn3 from \"../images/cookburn/10.png\"\nimport fn4 from \"../images/cookburn/11.png\"\nimport fn5 from \"../images/cookburn/12.png\"\n\nimport db1 from \"../images/cookburn/13.png\"\nimport db2 from \"../images/cookburn/14.png\"\nimport db3 from \"../images/cookburn/15.png\"\nimport db4 from \"../images/cookburn/16.png\"\n\nimport { Image, Carousel } from \"react-bootstrap\"\n\nconst cookBurnPage = () => (\n  <div>\n    <Header></Header>\n    <div\n      className=\"container\"\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        paddingBottom: `200px`,\n      }}\n    >\n      <h2 className=\"text-center pt-4 pb-2\">Cook Burn Application</h2>\n      <p className=\"text-center text-secondary\">June 2020 ~ May 2021</p>\n      <p className=\"text-center text-secondary\">\n        What if we don't know what to cook tonight? How could we make use of our\n        leftover ingredients?\n      </p>\n      <h3 className=\"pb-2\">Overview</h3>\n      <p>\n        This application is my senior project during my undergraduate years. The\n        goal of this project is to develop a mobile application, Cook Burn,\n        delivering the users with their desired constraints based on their\n        ingredients and their food preferences. It is the platform for\n        generating recipes that encourages users to empty their excess\n        ingredients and prepare meals effortlessly. The scope of the project is\n        for anyone who has no idea of which menu to cook from their ingredients.\n      </p>\n      <Image\n        src={cookburnOverview}\n        className=\"class-img-top px-5\"\n        alt=\"Cook Burn\"\n        fluid\n      />\n      <h3 className=\"pb-2\">Design process</h3>\n      <p>\n        Let’s say Som Ying is a woman at age 21 who lives with her family. She’s\n        get bored from cooking the same menu and ran out of ideas about making a\n        dish. She also wants to use up her ingredients as much as she can. And\n        her overall goal is to find recipes to cook for herself as well as for\n        her siblings. So, her pain points are that she has various ingredients\n        but still have no idea what menu to cook and do not satisfy the random\n        menu function of other applications because she doesn't just want to\n        randomize the menus, but also wants to add other constraints on top of\n        it. For instance, she would like to limit the calories of generated\n        menus.\n      </p>\n      <blockquote>\n        <p>\n          The user interface design was created according to the user persona\n          and its pain point.\n        </p>\n      </blockquote>\n      <p>\n        For the design, the main component of the application is the bottom tab\n        navigation which is created to provide convenience to the user to switch\n        between different routes. There are five bottom tabs navigation\n        including home page, adding ingredients page, searching page, work out\n        page, and setting page. Another important component is the sidebar where\n        user can access their profile and log out from the application.\n      </p>\n      <Image src={ds1} className=\"class-img-top px-5\" alt=\"Persona\" fluid />\n      <h4 className=\"pb-2 px-5\">Home page</h4>\n      <p className=\"px-5\">\n        It is represented by the home icon. From this page, users can see the\n        suggested nutrition level to consume each day and the update of\n        nutrition level from the app’s generated meal that the user has\n        consumed. It also displays the recently cooked menus as well as the\n        suggested workout.\n      </p>\n\n      <h4 className=\"pb-2 px-5\">Adding ingredients page</h4>\n      <p className=\"px-5\">\n        It is represented by the add icon. This page allows users to insert\n        their ingredients as well as the quantity and unit. It can be updated at\n        any time and the users can view the report of their current ingredients.\n      </p>\n      <Image\n        src={ds2}\n        className=\"class-img-top px-5\"\n        alt=\"Home and add ingredients page\"\n        fluid\n      />\n      <h4 className=\"pb-2 px-5\">Searching page</h4>\n      <p className=\"px-5\">\n        It is represented by the magnify icon. This page requires users to\n        select the people that they want to generate the meal for. The profile\n        of others could be added from the setting page. After selecting people\n        for that meal, users can have a choice to either select the conditions\n        for this meal or not. They can optimize some values such as the calories\n        and other nutrition components. The last step before generating the meal\n        is to insert the serving size of that meal. After clicking the generate\n        button from this page, users shall view all the possible menus which\n        also provide information of ingredients, lacking ingredients, recipe,\n        and nutrients.\n      </p>\n      <Image\n        src={ds3}\n        className=\"class-img-top px-5\"\n        alt=\"Searching page\"\n        fluid\n      />\n      <h4 className=\"pb-2 px-5\">Work out page</h4>\n      <p className=\"px-5\">\n        This page is represented by the dumbbell icon which users can easily\n        understand that this part is created for a set of workouts. The workout\n        sets are generated based on the cooked menu that users had selected from\n        the previous part. It is mainly designed according to the age of the\n        user and the calories of each menu.\n      </p>\n      <Image\n        src={ds4}\n        className=\"class-img-top px-5\"\n        alt=\"Work out page\"\n        fluid\n      />\n      <h4 className=\"pb-2 px-5\">Setting page</h4>\n      <p className=\"px-5\">\n        The setting tab is represented by a gear icon. Users are able to view\n        and edit their personal information as well as their food preferences.\n        This information is collected when the user starts using the\n        application, which is on the onboarding page. On this page, users are\n        also able to create or edit information for other people for who they\n        would like to generate a menu.\n      </p>\n      <Image\n        src={ds5}\n        className=\"class-img-top px-5\"\n        alt=\"Setting page\"\n        fluid\n      />\n      <h4 className=\"pb-2 px-5\">Sidebar</h4>\n      <p className=\"px-5\">\n        A sidebar is located on the top left of the application. This component\n        allows users to view their username as well as the profile icon. The\n        sign out button is located within this sidebar so that users can easily\n        log out from the application, for the sake of personal information\n        security ^^.\n      </p>\n      <Image src={ds6} className=\"class-img-top px-5\" alt=\"Sidebar\" fluid />\n      <h3 className=\"pb-2\">Overall approach</h3>\n      <p>\n        In this project, we decided to illustrate the application using React\n        Native frameworks and create an API to provide functions to the\n        application through AWS. Therefore, all of the backend services in this\n        application will be on the cloud by utilizing the tools provided by AWS.\n        Each function in the application was implemented by AWS lambda together\n        with Amazon API Gateway to generate each API to interchange data between\n        front and back. Amazon S3 was used to generate and store the image URL\n        and Amazon Dynamodb was used to store the data in this application.\n        Amazon S3 and Amazon Dynamodb were the storage services that were\n        integrated with the lambda functions. Moreover, there is another Amazon\n        service that was utilized in the front end development which is the AWS\n        Amplify framework. It is used for user authentication and authorization.\n        Later, these tools will be mentioned in the implementation of each main\n        function.\n      </p>\n      <h3 className=\"pb-2\">Function implementation</h3>\n      <p>\n        There are 4 main functions related to the application which are\n        authenticate user, create a profile, add an ingredient, and search menu.\n      </p>\n      <h4 className=\"pb-2 px-5\">Authenticate user</h4>\n      <p className=\"px-5\">\n        For the authentication process, the AWS amplify framework was used in\n        the frontend together with Amazon Cognito as the main authentication\n        provider. To implement authentication flows, the authentication methods\n        from AWS Amplify were called directly on the Auth class including\n        signUp, signIn, forgotPassword, and signOut. Moreover, once the users\n        are added to the user pool the Lambda function that was used to add the\n        user’s authentication information such as email and username will be\n        called immediately.\n      </p>\n      <h4 className=\"pb-2 px-5\">Create profile</h4>\n      <p className=\"px-5\">\n        To create a user process, inputs from users will be calculated and\n        stored in both the inputs and the calculated information in the\n        database. Those calculated data includes energy, fat, carbohydrate,\n        protein, sugar sodium, and fibre Furthermore, the selected menus for\n        taste and cuisine preferences are converted into numbers to be further\n        used to score each recommended menu. For the taste preferences, users\n        are defined by the level of taste buds. For the cuisine preferences,\n        users are defined as individuals who admire Thai food or not.\n      </p>\n      <h4 className=\"pb-2 px-5\">Add ingredient</h4>\n      <p className=\"px-5\">\n        In the add ingredient page, some of the ingredients information such as\n        images and units that were presented by ingredient types in the\n        application’s interface were retrieved from the database. However, some\n        of them from the searching bar were fetched from the open-source API as\n        there are limited spaces to store the ingredients in the database. And\n        the measurement of each ingredient was cleaned to provide users only\n        U.S. and Metrics systems. And this process requires users to press the\n        save button to save their ingredients information to the database so\n        that it can be used in the next step.\n      </p>\n      <h4 className=\"pb-2 px-5\">Search menu</h4>\n      <p className=\"px-5\">\n        There are two parts that were retrieved from users which are the\n        ingredient objects and the desired requirements for each search. For the\n        ingredient objects, they were used to search for possible menus from\n        open-source API. After retrieving the possible dishes based on the\n        ingredients, these dishes are selected once again according to the daily\n        basis of the user. If there are some recipes that exceed the daily\n        intakes, they will be deducted from the possible menu lists. Then they\n        are categorized based on the totality of the ingredients, taste\n        preference, and cuisine preferences. The percentage of each factor is\n        different since the totality of ingredients is the most important part\n        that allows users to eliminate their excess ingredients, therefore, it\n        has the most weight.\n      </p>\n      <p className=\"px-5\">\n        For the optimization, we introduced the objective function to minimize\n        or maximize cooking duration as our goal here, while having other\n        nutrition constraints with the minimum of 0 and maximum depending on the\n        user’s daily limitation. With this model, it is possible to select a set\n        of recipes that conform with our constraints, however, if the results\n        from the model turn out to be an infeasible solution, our code will\n        perform the selecting process based on the comparison of each constraint\n        by adding the possible recipe into an array then return the most common\n        one as the optimised menu instead. Moreover, that menu will be shown in\n        the very first block of the search recipes page the rest are shown\n        according to their score from weighting factors.\n      </p>\n      <div className=\"px-5\">\n        <Carousel prevLabel nextLabel interval=\"2000\">\n          <Carousel.Item>\n            <img className=\"d-block w-100 \" src={fn1} alt=\"First slide\" fluid />\n          </Carousel.Item>\n          <Carousel.Item>\n            <img\n              className=\"d-block w-100 \"\n              src={fn2}\n              alt=\"Second slide\"\n              fluid\n            />\n          </Carousel.Item>\n          <Carousel.Item>\n            <img className=\"d-block w-100 \" src={fn3} alt=\"Third slide\" fluid />\n          </Carousel.Item>\n          <Carousel.Item>\n            <img className=\"d-block w-100 \" src={fn4} alt=\"Forth slide\" fluid />\n          </Carousel.Item>\n          <Carousel.Item>\n            <img className=\"d-block w-100 \" src={fn5} alt=\"Fifth slide\" fluid />\n          </Carousel.Item>\n        </Carousel>\n      </div>\n\n      <h3 className=\"pb-2\">Database design</h3>\n      <p>\n        Each function was connected to the NoSQL database which is dynamoDB. For\n        this kind of database, we’ve to first create the entity relation to see\n        how each data was related to others.\n      </p>\n      <Image src={db1} className=\"class-img-top px-5\" alt=\"Cook Burn\" fluid />\n      <p>\n        After knowing this relation, the access pattern was created as in\n        dynamoDB we retrieve the information as the item in a row based on the\n        primary key. This access pattern is the process to analyse how the\n        entity can be fetched and manipulated. Here is the example of the access\n        pattern for this project, if we want to get the profile of the user,\n        we’ll need userID and username.\n      </p>\n      <Image src={db2} className=\"class-img-top px-5\" alt=\"Cook Burn\" fluid />\n      <p>\n        And then we can later design the primary key. In this case, our primary\n        key is a composite key that contains partition key (or PK) and sort key\n        (or SK). This PK and SK will be designed based on the access pattern\n        that we just created. These keys were used as the main query here.\n      </p>\n      <Image src={db3} className=\"class-img-top px-5\" alt=\"Cook Burn\" fluid />\n      <p>\n        However, there are some items that cannot be queried from just the\n        primary key, so here we used the secondary index to change between one\n        of the attributes and the sort key. For example, in our additional\n        function which is the workout, we want to retrieve the user’s menu\n        information that has the false workout status in order to show the\n        recommended workout for each menu. So the new sort key is now the\n        workout status. The reason for doing this is because we can reduce the\n        query duration by preparing all the data that could be queried in a row\n        or in this case based on the access pattern.\n      </p>\n      <Image src={db4} className=\"class-img-top px-5\" alt=\"Cook Burn\" fluid />\n      <h3 className=\"pb-2\">Application demo</h3>\n      <p>\n        Let’s walk through our application by pretending that Som Ying is our\n        user.\n      </p>\n      <div>\n        <div\n          className=\"px-5\"\n          style={{\n            position: \"relative\",\n            paddingTop: \"56.25%\",\n            marginBottom: \"50px\",\n          }}\n        >\n          <iframe\n            src=\"https://www.youtube.com/embed/mhzyxke2IkU\"\n            frameborder=\"0\"\n            allowfullscreen=\"\"\n            className=\"px-5\"\n            title='cb'\n            style={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          ></iframe>\n        </div>\n      </div>\n    </div>\n\n    <Footer></Footer>\n  </div>\n)\n\nexport default cookBurnPage\n","export default __webpack_public_path__ + \"static/1-a5bf9ccd4a60f67a16f245d14895e8d0.png\";","export default __webpack_public_path__ + \"static/10-2283936c420a49d1c0881e7a10455bd9.png\";","export default __webpack_public_path__ + \"static/11-ce3e2f20f413f73e1b661e5523362fa4.png\";","export default __webpack_public_path__ + \"static/12-f246deac3086d430f71e375887937745.png\";","export default __webpack_public_path__ + \"static/13-655bfbff95478e7aa04ca7c47c494601.png\";","export default __webpack_public_path__ + \"static/14-580b0fa2f54962d5b34245c0cb692318.png\";","export default __webpack_public_path__ + \"static/15-e2f10bb274e6a4526ae75cb9250b72e9.png\";","export default __webpack_public_path__ + \"static/16-729568f351d8f83eb4f13d7071930b67.png\";","export default __webpack_public_path__ + \"static/2-b78e85171eb6cf8d08c07bcb27bd24a0.png\";","export default __webpack_public_path__ + \"static/3-9fc4578bbed0c79b8d1b9ef4d4ab6a71.png\";","export default __webpack_public_path__ + \"static/4-4cd7ebd54ce721bee3c4a48c666b0d15.png\";","export default __webpack_public_path__ + \"static/5-ad31daa03d56d6b5295fb17e595f398f.png\";","export default __webpack_public_path__ + \"static/6-64d86882e8857fbdf04c186fbc0b1428.png\";","export default __webpack_public_path__ + \"static/7-472f8bd215ed05f44107641369257fd6.png\";","export default __webpack_public_path__ + \"static/8-43f4a8966d47b8bd129155d7acc72b71.png\";","export default __webpack_public_path__ + \"static/9-17decf432097f701719f862499a6f1d7.png\";"],"names":["className","style","margin","maxWidth","paddingBottom","src","cookburnOverview","alt","fluid","ds1","ds2","ds3","ds4","ds5","ds6","prevLabel","nextLabel","interval","fn1","fn2","fn3","fn4","fn5","db1","db2","db3","db4","position","paddingTop","marginBottom","frameborder","allowfullscreen","title","top","left","width","height"],"sourceRoot":""}